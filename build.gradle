plugins {
  id 'java'
  id 'idea'
  id 'org.springframework.boot' version '2.2.2.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'com.palantir.docker' version '0.17.2'
  id 'org.flywaydb.flyway' version '6.0.4'
  id 'com.diffplug.gradle.spotless' version '3.27.1'
}

group = 'com.alexgaas.testcontainersblueprints'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
  unitTestImplementation.extendsFrom implementation
  unitTestRuntimeOnly.extendsFrom runtimeOnly
  moduleTestImplementation.extendsFrom implementation
  moduleTestRuntimeOnly.extendsFrom runtimeOnly
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://jcenter.bintray.com" }
}

ext {
  set('snippetsDir', file("build/generated-snippets"))
  set('springCloudVersion', "Hoxton.M2")
  restAssuredVersion = '4.2.0'
  testContainersVersion = '1.12.3'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-data-rest'
  implementation 'org.apache.commons:commons-lang3:3.6'
  implementation 'org.apache.httpcomponents:httpclient:4.5.9'
  implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.3'
  implementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
  implementation 'org.flywaydb:flyway-core'
  implementation 'com.google.code.gson:gson:2.8.5'
  compile 'org.springframework.cloud:spring-cloud-starter-openfeign:2.1.3.RELEASE'
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation('org.springframework.security:spring-security-test')
  testImplementation('io.projectreactor:reactor-test')
  // rest assured
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'rest-assured-common', version: restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'json-path', version: restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'xml-path', version: restAssuredVersion
  testImplementation 'org.hamcrest:hamcrest:2.2'
  // testcontainers
  implementation platform("org.testcontainers:testcontainers:$testContainersVersion")
  testImplementation "org.testcontainers:mariadb:$testContainersVersion"
  testImplementation "org.testcontainers:jdbc:$testContainersVersion"
  testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
}

test {
  useJUnitPlatform()
  testLogging {
    events("passed", "skipped", "failed")
  }
}

// Spotless is used to lint and reformat source files
spotless {
  java {
    target 'src/main/java/**/*.java', 'src/test/java/**/*.java'
    googleJavaFormat()
    importOrder()
    removeUnusedImports()
    indentWithSpaces()
    trimTrailingWhitespace()
  }
}

// docker plugin setup
if (!project.hasProperty("dockerGroup")) {
  ext.dockerGroup = "sample"
}
docker {
  name "${dockerGroup}/blueprints:${version}"
  dockerfile file('../deploy/docker/Dockerfile')
  files jar.archivePath
  buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

// setup pre-push settings
task installGitHooks(type: Copy) {
  from new File(rootProject.rootDir, 'pre-push')
  into { new File(rootProject.rootDir, '.git/hooks') }
}
build.dependsOn installGitHooks
